@page "/upload"
@inject IOptionsMonitor<UploadOptions> uploadOptions
@inject IUploadService uploadService
@rendermode InteractiveServer

<article>
    <h1>Upload Your Video!</h1>

    <label for="video-upload">Video: </label>
    <InputFile id="video-upload" OnChange="uploadService.OnFileChanged" accept="video/*" />

    <button class="btn btn-outline-secondary" @onclick="() => uploadService.TryToUploadVideoAsync(OnUploadProgress)">Upload</button>
    <small class="text-muted">Video cannot exceed @(uploadOptions.CurrentValue.FileSizeLimitInMB)MB</small>
</article>

<h4>Upload Progress: @GetMbRemainingToUpload()MB Remaining (@GetCurrentVideoUploadPercentage()%)</h4>

@if (uploadService.UploadErrors.Count > 0)
{
    <section>
        <h4>There were some errors trying to upload your video:</h4>
        <ul>
            @foreach (var error in uploadService.UploadErrors)
            {
                <li><p class="alert-danger">@error</p></li>
            }
        </ul>
    </section>
}

@code {
    private void OnUploadProgress(long currentUploadedBytes)
    {
        NumberOfUploadedBytes = currentUploadedBytes;
    }

    private string GetMbRemainingToUpload()
    {
        const float MB = 1024 * 1024;
        var diffInBytes = uploadService.VideoFileSize - NumberOfUploadedBytes;
        var mbRemaining = diffInBytes / MB;
        return mbRemaining.ToString("N2");
    }

    private string GetCurrentVideoUploadPercentage()
    {
        if (uploadService.VideoFileSize == 0) return "0.00";

        var currentCompleted = NumberOfUploadedBytes / (float)uploadService.VideoFileSize;
        var uploadPercentage = currentCompleted * 100;
        return uploadPercentage.ToString("N2");
    }

    private long _numberOfUploadedBytes = 0;
    private long NumberOfUploadedBytes
    {
        get => _numberOfUploadedBytes;
        set
        {
            _numberOfUploadedBytes = value;
            StateHasChanged();
        }
    }
}
